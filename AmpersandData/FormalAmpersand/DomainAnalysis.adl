CONTEXT AST IN ENGLISH LATEX
-- The comments for this script can be found in DomainAnalysis.docadl

REPRESENT Representation TYPE ALPHANUMERIC
REPRESENT Identifier TYPE ALPHANUMERIC

PROCESS "Domain Analysis for Rules" -- This includes both equalities (e.g. r = s) and inequalities (e.g. r |- s)
    CONCEPT Rule ""
    RELATION lhTerm[Rule*Term] [UNI] -- @Stef: Haal jij deze weg? Worden niet gevuld vanuit Meatgrinder
    RELATION rhTerm[Rule*Term] [UNI] -- @Stef: Haal jij deze weg? Worden niet gevuld vanuit Meatgrinder
    RELATION valid[Rule*Context] [UNI]
 
    ROLE ExecEngine MAINTAINS domainDomRule
    RULE domainDomRule : dom~;lhTerm~;rhTerm;dom \/ dom~;rhTerm~;lhTerm;dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodRule
    RULE domainCodRule : cod~;lhTerm~;rhTerm;cod \/ cod~;rhTerm~;lhTerm;cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPROCESS

PROCESS "Domain Analysis for Intersections"
    VIEW Intersection : Intersection(TXT "(", lhs, TXT "/\\", rhs, TXT ")")
    CLASSIFY Intersection ISA BinaryTerm

    ROLE ExecEngine MAINTAINS domainDomIntersection
    RULE domainDomIntersection : dom~;I[Intersection];lhs[BinaryTerm*Term];dom \/ dom~;I[Intersection];rhs[BinaryTerm*Term];dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodIntersection
    RULE domainCodIntersection : cod~;I[Intersection];lhs[BinaryTerm*Term];cod \/ cod~;I[Intersection];rhs[BinaryTerm*Term];cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPROCESS

PROCESS "Domain Analysis for Unions"
    VIEW Union : Union(TXT "(", lhs, TXT "\\/", rhs, TXT ")")
    CLASSIFY Union ISA BinaryTerm

    ROLE ExecEngine MAINTAINS domainDomUnion
    RULE domainDomUnion : dom~;I[Union];lhs[BinaryTerm*Term];dom \/ dom~;I[Union];rhs[BinaryTerm*Term];dom |- sub~
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodUnion
    RULE domainCodUnion : cod~;I[Union];lhs[BinaryTerm*Term];cod \/ cod~;I[Union];rhs[BinaryTerm*Term];cod |- sub~
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPROCESS

PROCESS "Domain Analysis for Minuses"
    VIEW Minus : Minus(TXT "(", lhs, TXT "-", rhs, TXT ")")
    CLASSIFY Minus ISA BinaryTerm

    ROLE ExecEngine MAINTAINS domainDomMinus
    RULE domainDomMinus : dom~;I[Minus];lhs[BinaryTerm*Term];dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodMinus
    RULE domainCodMinus : cod~;I[Minus];rhs[BinaryTerm*Term];cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPROCESS


PROCESS "Domain Analysis for Compositions"
    VIEW Composition : Composition(TXT "(", lhs, TXT ";", rhs, TXT ")")
    CLASSIFY Composition ISA BinaryTerm
    RELATION inter[Composition*TypeTerm]

    ROLE ExecEngine MAINTAINS domainDomComposition
    RULE domainDomComposition : dom~;I[Composition];lhs[BinaryTerm*Term];dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodComposition
    RULE domainCodComposition : cod~;I[Composition];rhs[BinaryTerm*Term];cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE User MAINTAINS compositionCheck
    RULE compositionCheck : I[Composition] |- lhs;cod;(subStar;subStar~);dom~;rhs~
    VIOLATION (TXT "The target of term ", SRC lhs, TXT ", ", SRC lhs;tgt, TXT ", does not match the source of term ", TGT rhs, TXT ", which is ", SRC rhs;src, TXT ".")

    ROLE ExecEngine MAINTAINS compositionNewTypeTerm
    RULE compositionNewTypeTerm : I[Composition] {-/\ lhs;cod;(subStar;subStar~);dom~;rhs~-} |- inter;inter~
    VIOLATION (TXT "{EX}_; InsPair_;inter_;Composition_;", SRC I, TXT "_;TypeTerm_;inter(", SRC I, TXT ")"
              ,TXT "{EX}_; InsPair_;sub_;TypeTerm_;inter(", SRC I, TXT ")_;TypeTerm_;", SRC lhs;cod
              ,TXT "{EX}_; InsPair_;sub_;TypeTerm_;inter(", SRC I, TXT ")_;TypeTerm_;", SRC rhs;dom
              )
ENDPROCESS

PROCESS "Domain Analysis for Converses"
    VIEW Converse : Converse(flp, TXT "~")
    CLASSIFY Converse ISA Term
    RELATION flp[Converse*Term] [UNI,TOT]

    ROLE ExecEngine MAINTAINS insDomRelation
    RULE converseDom :    dom~;I[Converse];flp;cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
    RULE converseDomFlp : dom~;I[Converse];flp;cod |- sub~
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", TGT I, TXT "_;TypeTerm_;", SRC I)
    RULE converseCod :    cod~;I[Converse];flp;dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
    RULE converseCodFlp : cod~;I[Converse];flp;dom |- sub~
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", TGT I, TXT "_;TypeTerm_;", SRC I)
ENDPROCESS

PROCESS "Domain Analysis for Relations" -- This includes Vee-terms (e.g. V[A*B]) and I-terms (e.g. I[A])
    --RELATION repr[Term*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    CLASSIFY Relation ISA Term
    RELATION relations[Context*Relation] [INJ] -- SUR is maintained by RULE SURrelations
    ROLE ExecEngine MAINTAINS SURrelations
    RULE SURrelations : I[Relation] |- relations~;relations
    VIOLATION ( TXT "{EX} DelAtom;Rule;", SRC I )

    RELATION popset[Concept*TypeTerm] [UNI] -- TOT is computed by the exec-engine

    ROLE ExecEngine MAINTAINS insDomRelation
    RULE insDomRelation : dom~;source;popset |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS insCodRelation
    RULE insCodRelation : cod~;target;popset |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPROCESS

PROCESS "Binary Terms"
    CONCEPT Operator ""
    CONCEPT BinaryTerm ""
    CLASSIFY BinaryTerm ISA Term
    RELATION lhs[BinaryTerm*Term] [UNI]
    RELATION rhs[BinaryTerm*Term] [UNI]
    RELATION operator[BinaryTerm*Operator] [UNI]
ENDPROCESS

PROCESS "Binding Terms to Relations"
    ROLE ExecEngine MAINTAINS insSubBind
    RULE insSubBind : dom~;(bind\/bind~);dom \/ cod~;(bind\/bind~);cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    RELATION bind[Term*Relation] [UNI]
ENDPROCESS

ENDCONTEXT