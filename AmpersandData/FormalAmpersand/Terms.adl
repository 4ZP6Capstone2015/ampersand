CONTEXT AST IN ENGLISH LATEX
-- The comments for this script can be found in Atoms.doc
INCLUDE "Atoms.adl"
INCLUDE "DomainAnalysis.adl"


    RELATION valid[Rule*Context] [UNI]
    RELATION relations[Context*Relation] [INJ] -- SUR is maintained by RULE SURrelations
--    ROLE ExecEngine MAINTAINS SURrelations
--    RULE SURrelations : I[Relation] |- relations~;relations
--    VIOLATION ( TXT "{EX} DelAtom;Rule;", SRC I )

PROCESS "Term definitions"
    VIEW Equivalence        : Equivalence(TXT "RULE ", first, TXT " = ", second)
    VIEW Inclusion          : Inclusion  (TXT "RULE ", first, TXT " |- ", second)
    VIEW Truth              : Truth      (TXT "RULE ", I[Term])
    VIEW Relation           : Relation(name, TXT "[", source;name, TXT "*", target;name, TXT "]")
    VIEW UnaryMinus         : UnaryMinus(TXT "-", arg)
    VIEW Converse           : Converse  (arg, TXT "~")
    VIEW KleeneStar         : KleeneStar(arg, TXT "*")
    VIEW KleenePlus         : KleenePlus(arg, TXT "+")
    VIEW Intersection       : Intersection      (TXT "(", first, TXT "/\\", second, TXT ")")
    VIEW Union              : Union             (TXT "(", first, TXT "\\/", second, TXT ")")
    VIEW Minus              : Minus             (TXT "(", first, TXT  "-" , second, TXT ")")
    VIEW Composition        : Composition       (TXT "(", first, TXT  ";" , second, TXT ")")
    VIEW CartesianProduct   : CartesianProduct  (TXT "(", first, TXT  "#" , second, TXT ")")
    VIEW RelationalAddition : RelationalAddition(TXT "(", first, TXT  "!" , second, TXT ")")
    VIEW LeftResidual       : LeftResidual      (TXT "(", first, TXT  "/" , second, TXT ")")
    VIEW RightResidual      : RightResidual     (TXT "(", first, TXT "\\" , second, TXT ")")


    CONCEPT Rule ""
    RELATION rrexp[Rule*Term] [UNI]

    CLASSIFY Equivalence ISA Rule
    CLASSIFY Inclusion   ISA Rule
    CLASSIFY Truth       ISA Rule
    CLASSIFY Equivalence ISA BinaryTerm
    CLASSIFY Inclusion   ISA BinaryTerm
    CLASSIFY Truth       ISA Term
    --RELATION repr[Term*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    CLASSIFY Relation           ISA Term
    CLASSIFY Converse           ISA UnaryTerm
    CLASSIFY KleeneStar         ISA UnaryTerm
    CLASSIFY KleenePlus         ISA UnaryTerm
    CLASSIFY UnaryMinus         ISA UnaryTerm
    CLASSIFY UnaryMinus         ISA Minus
    CLASSIFY Intersection       ISA BinaryTerm
    CLASSIFY Union              ISA BinaryTerm
    CLASSIFY Minus              ISA BinaryTerm
    CLASSIFY Composition        ISA BinaryTerm
    CLASSIFY CartesianProduct   ISA BinaryTerm
    CLASSIFY RelationalAddition ISA BinaryTerm
    CLASSIFY LeftResidual       ISA BinaryTerm
    CLASSIFY RightResidual      ISA BinaryTerm
ENDPROCESS


{- I can't get the following to work...  Grrr!
PROCESS "Type graph"
    RELATION elem[TypeTerm*Node] [UNI]

    ROLE ExecEngine MAINTAINS elemFill, elemNew
    RULE elemNew : I[TypeTerm] |- elem;elem~
    VIOLATION (TXT "{EX}_; NewStruct_;Node" -- maak een nieuw atoom in concept Node
                    ,TXT "_;elem_;TypeTerm_;", SRC I, TXT "_;Node_;_NEW"
              )
    RULE elemFill : (subStar/\subStar~);elem |- elem
    VIOLATION (TXT "{EX} InsPair;elem;TypeTerm;", SRC I, TXT ";Node;", TGT I)
ENDPROCESS -}

ENDCONTEXT