[Rieks:]
Issue: The following file produces the following error:

ADLvs1.1.0.749.exe: !Fatal (module RelBinGenBasics 606): evaluating (Fi []) in sqlExprSrc (V)

<QUOTE>
ADLvs1.1.0.739.exe: !Fatal (module CC 145): defd undefined in pRuleDef ctRule;subExprOf~*;predic
ate
<\QUOTE>

The .adl file that produced this error is as follows:

<QUOTE>
CONTEXT PolicyMgt -- DATE: wo 22-09-2010  10:00:10,72
-- (file:  Governance.txt ) -- 
{-EXPLAIN CONTEXT PolicyMgt IN ENGLISH
{+In order for an organizations to be(come) accountable to one another, they should be aware of their

- span of control (scope),
- obligations towards others and
- expectations, both of the world and other organizations. 

Being 'in control' means that an organization shapes these limitations in such a way that at any point in time, it can fulfill all of its obligations, even if (some of) its expectations are not met. Alternatively, the measure of robustness of an organisation is the measure by which it can fulfill its obligations even if its expectations are not met.

This application provides support for governance in an organization, i.e. it helps to express the organizations needs for fulfilling its obligations, support contract negotiations and policy definition, and manage the risks of not fulfill its obligations.
-}
{-===================================================================-}
-- (file:  Holons.pat ) -- 
PATTERN Holons -- WIJZIGER: rieks.joosten@tno.nl
EXPLAIN PATTERN Holons IN ENGLISH
{+In order for organizations to be(come) in control, the scope of control of an organization should small enough for its manager to oversee; since managers are humans, every of their tasks should meet Anderson's 'cope-ability criterion' [Anderson]_, which states that if humans are required to oversee anything more complex than some 5 (give or take 2) concepts, they start to err. This pattern provides the basics that enable scoping within (or across) organizations such that Anderson's cope-ability criterion can be met. 
-}
-----------------------------------------------------------------------
{- Revision history
RJ/20100916 - Documentation update
RJ/20100803 - distinction between obligation rules and expectation rules.
RJ/20100729 - Created holons pattern (split off from PolicyMgt
-}
-----------------------------------------------------------------------
-- Markup uses `reStructuredTexts <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`__

CONCEPT Holon "a scope ('afbakening' in Dutch) that is committed to comply with a specific set of rules (its obligationrules) and expects itself or other holons to comply with a specific set of rules (its expectationrules)"

-- Onderstaandbedoelde wikipedialink is: `WikiPedia <http://en.wikipedia.org/wiki/Holon_%28philosophy%29>`_
EXPLAIN CONCEPT Holon IN ENGLISH
{+In order for an organization to be(come) accountable, it must be aware of its

- span of control (scope);
- obligations towards others and itself;
- expectations, both of the world, other organizations and itself.

We use the term Holon [#Holon]_ as the conceptual anchor that identifies the rules that constitute obligations or expections to (a part of) an scope of control. 

.. [#Holon] Our use of this term is loosely inspired on  the contents found at <http://en.wikipedia.org/wiki/Holon_%28philosophy%29>`_

One idea behind Holons is that it provides a scope within which work becomes manageable for humans; this allows people to focus on only that part of all the work that is 'inside scope'. This is necessary in order to stay within the intrinsic human limitations as referred to e.g. by [Anderson]_.

Examples of (our) holons are:

- a military patrol in a UN mission in Uruzgan (e.g. having been assigned the task of trying to find roadbombs);
- a financial department of an enterprise;
- a process whose aim it is to get all bills paid for orders of stocked items;
- a system whose purpose it is to deliver documents upon request;
- a person who wants to live a life in luxury;

All holons have in common that there is a set of rules that they are committed to comply with. These 'obligationrules' (or 'rules-of-engagement'), specific for each holon, define (and constrain) the work that is done within (the scope of) a holon. Thus, a holon should be able to report on the level of compliance to these rules. Also, a holon may want to assess the risk involved by non-compliance. Examples of obligationrules for holons are:

- the military patrol may have a rule 'firing shall not be done on civilians';
- the financial department may have a rule 'income shall exceed expenses by at least 10%';
- the process may have a rule 'unpaid bills sent more than 4 weeks ago shall be handed over to an incasso bureau';
- the system may have a rule 'documents shall only be sent to subscribers';
- the person may have a rule 'I must not do anything that may harm other people'.

All holons also have in common that there is a set of rules that they expect to be complied with, either by other holons, by themselves, or by nature (G.O.D. = a Gathering Of Deities). These 'expectationrules' are the consequence of acknowledging that no holon can do everything all by itself. It is useful for a holon to know its expectations (and from whom this is expeced) so that it can verify whether or not its expectations are being met, and take action if this is not the case.
-}

isParentOf :: Holon * Holon [ASY] PRAGMA "" " is a parent of ".
EXPLAIN RELATION isParentOf IN ENGLISH
{+In order to accommodate hierarchies, a parent-child relation must be available. Since it is characteristic for holons to be part of multiple hierarchies (also called holarchies), we do not specify a multiplicity.-}

RULE "holons are not their own parents" MAINTAINS isParentOf |- -I
EXPLAIN RULE "holons are not their own parents" IN ENGLISH
{+Holons cannot be their own parents (or their own children) in the same way that people are not their own children or parents.-}

committedTo :: Holon * Rule PRAGMA "" " is committed to comply with ".
EXPLAIN RELATION committedTo[Holon*Rule] IN ENGLISH
{+Holons serve as scopes within which commitment exists to comply with rules.-} 

expectedBy  :: Rule * Holon [UNI] PRAGMA "Compliance to " " is expected by ".
EXPLAIN RELATION expectedBy[Rule*Holon] IN ENGLISH
{+A holon may have expectations, i.e. rules that somehow, outside the scope of control of the holon, are expected to be satisfied. Note that since holons are in charge of their own expectations, each rule that represents an expectation of a holon must be under the control of that holon. In order to prevent multiple holons to change (if necessary) a single rule, every rule shall be expected by at most one holon. -} 

expectedFrom:: Rule * Holon PRAGMA "Compliance to " " is expected from ".
EXPLAIN RELATION expectedFrom[Rule*Holon] IN ENGLISH
{+An expectation of a holon can be assigned to other holons, meaning that these other holons are expected to satisfy the rule representing the expectation.-} 

RULE "rule attachment" MAINTAINS
I[Rule] |- committedTo~;committedTo \/ expectedBy;expectedBy~
EXPLAIN RULE "rule attachment" IN ENGLISH
{+Every rule is either committed to or expected by a(t least one) holon.-}

RULE "rules for oneself" MAINTAINS
expectedBy /\ expectedFrom |- committedTo[Holon*Rule]~
EXPLAIN RULE "rules for oneself" IN ENGLISH
{+A rule that a holon expects itself to comply with, is implicitly committed to by that holon.-}

RULE "uncommitted expectations" SIGNALS
expectedFrom[Rule*Holon] |- committedTo~
EXPLAIN RULE "uncommitted expectations" IN ENGLISH
{+If a holon expects itself or another holon to comply with a rule, that holon should have committed itself to this rule; if not, work needs to be done to fix the situation.-}

ENDPATTERN
{-===================================================================-}
-- (file:  Holons.svc ) -- 
-----------------------------------------------------------------------
{- Revision history
RJ/20100803 - first setup.
-}
-----------------------------------------------------------------------

SERVICE "HolonRules": I[Holon]
= [ "Holon"         : I[Holon]
  , "committedTo"   : committedTo[Holon*Rule]
  , "expected"      : expectedBy[Rule*Holon]~
  = [ "expected"    : I[Rule]
    , "expectedFrom": expectedFrom
  ] ]

{-
SERVICE "HolonPolicies": I[Holon]
= [ "Holon"         : I[Holon]
  , "committedTo"   : committedTo[Holon*Policy]
  , "expected"      : expectedBy[Policy*Holon]~
  = [ "expected"    : I[Policy]
    , "expectedFrom": expectedFrom
  ] ]
-}
-----------------------------------------------------------------------
{- examples from other sources, for inspiration

SERVICE "RuleHolons": I[ONE]
= [ "Rol"        : V[ONE*]
  = [ "Naam"     : personAssignedRole~;pName
  ] ]

SERVICE "Dossiers": I[ONE]
= [ "Dossier van" : V[ONE*DossierArtefact];pDossier~
  = [ "Naam"    : pName
    , "Dossier" : pDossier
  ] ]

SERVICE "Dossiers": V[ONE*DossierArtefact];pDossier~
= [ "Dossiers"  : I[Person]
  = [ "Naam"    : pName
    , "Dossier" : pDossier
  ] ]
-}
-----------------------------------------------------------------------
{-===================================================================-}
-- (file:  PolicyMgt.pat ) -- 
PATTERN PolicyMgt -- WIJZIGER: rieks.joosten@tno.nl
EXPLAIN PATTERN PolicyMgt IN ENGLISH REF "RJ"
{+This pattern facilitates rule management by providing the concept 'policy' to designate a coherent set of rules and subsequently providing the same rules and relations for policies as exist for individual rules.
-}
-----------------------------------------------------------------------
{- Revision history
RJ/20100803 - distinction between obligation policy and expectation policy
RJ/20100725 - definition of holon, holon policy and how holon policy comes about
-}
-----------------------------------------------------------------------
-- Markup uses `reStructuredTexts <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`__

CONCEPT Policy "a set of rules that, for one reason or another, can be treated as a whole."
EXPLAIN CONCEPT Policy IN ENGLISH
{+Policies allow the (nested) grouping of rules for any arbitrary purpose, thus assisting humans in managing vast amounts of rules. Thus, whatever is said or done for a policy is (implicitly also) said or done for all rules in that policy. An example of this is that commitment to a policy implies commitment to every of its rules.-}

contains    :: Policy * Rule  PRAGMA "" " contains ".
EXPLAIN RELATION contains[Policy*Rule] IN ENGLISH
{+A policy is a container for rules.-}

committedTo :: Holon * Policy PRAGMA "" " is committed to comply with (all rules contained in) ".
EXPLAIN RELATION committedTo[Holon*Policy] IN ENGLISH
{+Holons serve as scopes within which commitment exists to comply with policies (i.e. sets of rules)-}

expectedBy  :: Policy * Holon [UNI] PRAGMA "Compliance to (all rules contained in) " " is expected by ".
EXPLAIN RELATION expectedBy[Policy*Holon] IN ENGLISH
{+A holon may have expectations, i.e. rules that somehow, outside the scope of control of the holon, are expected to be satisfied. For its convenience, such rules can be gathered in policy.-}

expectedFrom:: Policy * Holon PRAGMA "Compliance to (all rules contained in) " " is expected from ".
EXPLAIN RELATION expectedFrom[Policy*Holon] IN ENGLISH
{+Expectations of a holon, expressed as a policy containting rules representing such expectations, can be assigned to other holons, meaning that these other holons are expected to satisfy all rules in that policy.-}

RULE policycommitment MAINTAINS
committedTo; contains = committedTo
EXPLAIN RULE policycommitment IN ENGLISH
{+Commitment to a policy (by a holon) implies commitment to every rule contained therein. Conversely, all rules committed to (by a holon) must be part of a policy (that is committed to by this holon)-}

RULE policyexpectations1 MAINTAINS
expectedBy |- -contains!expectedBy
EXPLAIN RULE policyexpectations1 IN ENGLISH
{+A policy that a holon expects to be complied with shall only contain rules that the holon expects to be complied with.-}

RULE policyexpectations2 MAINTAINS
expectedFrom |- -contains!expectedFrom
EXPLAIN RULE policyexpectations2 IN ENGLISH
{+A policy that a holon expects from a(nother) holon shall only contain rules that the holon expects from that holon.-}

RULE policy1 MAINTAINS
I[Policy] |- committedTo~;committedTo \/ expectedBy;expectedBy~
EXPLAIN RULE policy1 IN ENGLISH
{+Every policy is either committed to or expected by a(t least one) holon.-}

RULE policy2 MAINTAINS
expectedBy /\ expectedFrom |- committedTo[Holon*Policy]~
EXPLAIN RULE policy2 IN ENGLISH
{+A policy that a holon expects itself to comply with, is implicitly committed to by that holon.-}

RULE spolicy1 SIGNALS
expectedFrom[Policy*Holon] |- committedTo~
EXPLAIN RULE spolicy1 IN ENGLISH
{+If a holon expects itself or another holon to comply with a policy, that holon should have committed itself to this policy; if not, work needs to be done to fix the situation.-}

-----------------------------------------------------------------------
{- Subpolicies may come in handy as well.... -} 

subPolicyOf :: Policy * Policy [ASY] PRAGMA "All rules contained in " " are also contained in ".
EXPLAIN RELATION subPolicyOf IN ENGLISH
{+Policies may contain other policies, which may contain still other policies, and so on. Since every policy is a set of rules, this implies that all rules contained in a policy that is contained in another policy, are also contained in that other policy."-}

RULE policycontainment MAINTAINS subPolicyOf~; contains |- contains
EXPLAIN RULE policycontainment IN ENGLISH
{+All rules that are contained in a policy that is part of another policy, are also contained in that other policy.-}

RULE policycommitment MAINTAINS committedTo; subPolicyOf~ |- committedTo
EXPLAIN RULE policycommitment IN ENGLISH
{+Commitment to a policy implies commitment to every subpolicy contained therein.-}

RULE policyexpectations1 MAINTAINS subPolicyOf; expectedBy |- expectedBy
EXPLAIN RULE policyexpectations1 IN ENGLISH
{+Expectance of a policy implies expectance of every subpolicy contained therein.-}

RULE policyexpectations2 MAINTAINS subPolicyOf; expectedFrom |- expectedFrom
EXPLAIN RULE policyexpectations2 IN ENGLISH
{+Expectance of a policy implies expectance of every subpolicy contained therein.-}

-----------------------------------------------------------------------
EXPLAIN CONCEPT Holon IN ENGLISH REF "PolicyMgt.pat"
{+A characteristic property for a holon is that it is part of (often multiple) hierarchies, which has as consequence that the holon must comply with the 'rules of engagement' of every holon that is 'its parent' in a hierarchy that it is part of. 

For example, a military patrol is in the organizational hierarchy of the army of which it is part. Also, it is part of the organizational hierarchy of the (Uruzgan) mission, which consists of (parts of) other armies. For insiders: the patrol is also part of the information hierarchy with levels 'dv', 'confi', 'secret' and 'top secret'. The military patrol must hence comply with the 'rules of engagement' for the Dutch army, the rules of engagement of the Uruzgan mission as specified by the UN, the Dutch laws, etc.

The aforementioned process is part of a multiple process hierarchies (e.g. the ordering process hierarchy and the billing process hierarchy), but it can also be part of an organizational hierarchy (as it differs whether the process is done in company A or company B), meaning that it has to comply with all rules for 'ordering', all rules for 'billing' and all rules-of-conduct for the company in which it is run. 

Thus, for every such hierarchy that a holon is part of, it has a parent holon, whose obligationspolicy needs to be complied with. To do so, the parent holon creates an ExpectedPolicy for every of its child(ren) and the children MUST commit to this policy.
-}
-----------------------------------------------------------------------
ENDPATTERN
{-===================================================================-}
-- (file:  Agreements.pat ) -- 
PATTERN Agreements -- WIJZIGER: rieks.joosten@tno.nl
EXPLAIN PATTERN Agreements IN ENGLISH REF "RJ"
{+This pattern models agreements in terms of holons and policy.-}
-----------------------------------------------------------------------
{- Revision history
RJ/20100802 - first draft of pattern.
-}
-----------------------------------------------------------------------
EXPLAIN CONCEPT Holon IN ENGLISH REF "Agreements.pat"
{+Holons may relate to other holons without being in a predefined hierarchy. For example, at some point in time a military patrol may need to cooperate with a Red Cross hospital, or an ordering process of company A may need to interact with a fulfillment process of company B. For these situations, agreements are needed that have one expectationspolicy for every party in the agreement (that is to be complied with by that party).

We do this by postulating a Holon for which the agreement rules are both the obligationspolicy and the expectationspolicy. Any holon may join the agreement by becoming its child. By doing so, the mechanism by which rules 'trickle through' holarchies ensures that the Agreement gets subpolicies that are issued as expectedpolicies to the various participants, that they subsequently must commit to. This must be done in such a way that the obligationspolicy of the Agreement (being the set of agreementrules) is complied with."
-}

GEN Agreement ISA Holon
party :: Holon * Agreement PRAGMA "" " is party to ".
EXPLAIN RELATION party IN ENGLISH
{+Holons can be party to an agreement (holon), meaning that there is a policy (set of rules) for that agreement (holon) that is to be committed to by the set of all agreeing parties-}

RULE agreementparty MAINTAINS party |- isParentOf~
EXPLAIN RULE agreementparty IN ENGLISH
{+Parties to an agreement are children of the holon that serves as the scope of the agreement.-}

-----------------------------------------------------------------------
ENDPATTERN
{-===================================================================-}
-- (file:  RiskMatrix.pat ) -- 
PATTERN RiskMatrix -- WIJZIGER: rieks.joosten@tno.nl
EXPLAIN PATTERN RiskMatrix IN ENGLISH REF "RJ"
{+A risk matrix is a mechanism that helps holon(owner)s to

a) make an inventory of risks that it runs, under the assumption that a risk is defined as the expected amount of damage a holon suffers from not complying with an obligation.
b) define ExpectedPolicies by which such risks can be mitigated.

The pattern 'RiskComputations' builds on this pattern, extending it with functionality for assessing risks.
-}
-----------------------------------------------------------------------
{- Revision history
RJ/20100803 - (thoroughly) revised pattern, with more explicit room for the risk matrix itself.
RJ/20100725 - first draft of pattern, according to whiteboard session.
-}
-----------------------------------------------------------------------
CONCEPT RiskMatrix "a specification of all data that is to be presented in view to a user, where all of this data is meaningful to a specified holon."
EXPLAIN CONCEPT RiskMatrix IN ENGLISH REF "RJ" 
{+Typically, a risk matrix specification includes:

a) a subset of all obligationrules of the holon;
b) a subset of all attribute types for obligationrules;
c) a subset of all expectationrules of the holon;
d) a subset of all attribute types for expectationrules;
e) optionally: the set of computationcoefficients that relate the obligationsrules and expectationrules as indicated sub b) and sub d), for a specific computationmethod.
-}

rmOblRule :: RiskMatrix * Rule         PRAGMA "An obligation in " " is ".
rmExpRule :: RiskMatrix * Rule         PRAGMA "An expectation in " " is ".
rmOblRAT  :: RiskMatrix * RuleAttrType PRAGMA "The obligation attributes to use in risk matrices of type " " are of category ".
rmExpRAT  :: RiskMatrix * RuleAttrType PRAGMA "The expectation attributes to use in risk matrices of type " " are of category ".
rmtComp   :: RiskMatrixType * Method   PRAGMA "Conversion between obligation and expectation attributes (or vice versa) for risk matrices of type " " is done by ".

-----------------------------------------------------------------------
EXPLAIN CONCEPT RiskMatrix IN ENGLISH
{+Every RiskMatrix is associated with a specific holon. Every obligation or expectation rule associated to the risk matrix must be an obligation or expectation rule of this holon.-}

rmHolon :: RiskMatrix -> Holon PRAGMA "" " uses rules that are obligations or expectations of ".

RULE obligations MAINTAINS rmHolon~; rmOblRule |- committedTo
EXPLAIN RULE obligations IN ENGLISH
{+Every obligation rule in a risk matrix constitutes an obligation of the risk matrixes holon.-}

RULE expectations MAINTAINS rmHolon~; rmExpRule |- expectedBy~
EXPLAIN RULE expectations IN ENGLISH
{+Every expectation rule in a risk matrix constitutes an expectation of the risk matrixes holon.-}

-----------------------------------------------------------------------
CONCEPT RATCategory "a category for rule attribute types."
EXPLAIN CONCEPT RATCategory IN ENGLISH
{+As some rule attribute types (e.g. 'Risk' or 'Impact') are irrelevant for expectationrules, while others (such as 'Probability') are relevant for both expectationrules and obligationrules, rule attribute types are categorized by the text 'obligation' and/or 'expectation' that indicates for which kind of rules an attribute type is relevant.-}

ratCat :: RuleAttrType * RATCategory PRAGMA "" " is useful for rules in the category "
  = [ ("Impact", "obligation")
    ; ("Importance", "expectation")
    ; ("ExpProbability", "expectation")
    ; ("OblProbability", "obligation")
    ; ("Risk", "obligation")
    ].

RULE ratcategories MAINTAINS I[RATCategory] = 'obligation' \/ 'expectation'
EXPLAIN RULE ratcategories IN ENGLISH
{+There are only two RATCategories: 'obligation's and 'expectation's.-}

RULE obligationattributes MAINTAINS I /\ rmOblRAT~;rmOblRAT |- ratCat; 'obligation'; ratCat~
EXPLAIN RULE obligationattributes IN ENGLISH
{+Risk matrix types that use attribute types for obligationrules may only do so if the attribute type is relevant for obligationrules.-}

RULE expectationattributes MAINTAINS I /\ rmExpRAT~;rmExpRAT |- ratCat; 'expectation'; ratCat~
EXPLAIN RULE expectationattributes IN ENGLISH
{+Risk matrix types that use attribute types for expectationrules may only do so if the attribute type is relevant for expectationrules.-}

-----------------------------------------------------------------------
CONCEPT RuleAttrType "a classification of RuleAttrs."
EXPLAIN CONCEPT RuleAttrType IN ENGLISH
{+RuleAttrTypes have names such as 'Risk', 'Impact', 'Probability', 'Importance' etc. Every rule attribute type specifies the data type of values of rule attribute instantiations. Also, each RuleAttrType is categorized (see concept RATCategory for details).-}

ratName     :: RuleAttrType -> Text PRAGMA "" " is referred to by the name "
  = [ ("Impact", "Impact")
    ; ("Importance", "Importance")
    ; ("ExpProbability", "Probability")
    ; ("OblProbability", "Probability")
    ; ("Risk", "Risk")
    ].
EXPLAIN RELATION ratName IN ENGLISH
{+Examples of names that are used to refer to attribute types: 'Risk', 'Impact', 'Probability', 'Importance', etc.-}

ratDataType :: RuleAttrType -> DataType PRAGMA "Values of attributes in " " use data of type "
  = [ ("Impact", "LMH")
    ; ("Importance", "LMH")
    ; ("ExpProbability", "LMH")
    ; ("OblProbability", "LMH")
    ; ("Risk", "LMH")
    ].
EXPLAIN RELATION ratDataType IN ENGLISH
{+Values of attributes for the usual attribute types (e.g. 'Risk', 'Impact', 'Probability', 'Importance') will be 'L' (Low), 'M' (Medium), or 'H' (High)-}

-----------------------------------------------------------------------
CONCEPT RuleAttr "an attribute for (matrix) rules."
EXPLAIN CONCEPT RuleAttr IN ENGLISH
{+RuleAttrs come in types, such as 'Risk', 'Impact', 'Probability', 'Importance' etc. Also, RuleAttrs may be assigned values (whose datatype is specified by the RuleAttrType of which the RuleAttr is an instantiation).-}

raType  :: RuleAttr -> RuleAttrType PRAGMA "" " has a value of type ".
raRule  :: RuleAttr -> Rule PRAGMA "The meaning of " " is with respect to ".
raHolon :: RuleAttr -> Holon PRAGMA "" " has a meaning within (the scope of) ".

RULE ruleattrID MAINTAINS I[RuleAttr] = raType;raType~ /\ raRule;raRule~ /\ raHolon;raHolon~
EXPLAIN RULE ruleattrID IN ENGLISH
{+Every rule attribute is uniquely characterized by:

a) its type;
b) the rule with which it is associated;
c) the holon to which it is associated.
-}

RULE obligationattributes MAINTAINS rmOblRule; raRule~; raType |- rmOblRAT 
EXPLAIN RULE obligationattributes IN ENGLISH
{+Every attribute that is assigned to an obligation rule in a risk matrix, must be of a type that is specified for obligation rules for this type of risk matrices.-}

RULE expectationattributes MAINTAINS rmExpRule; raRule~; raType |- rmExpRAT 
EXPLAIN RULE expectationattributes IN ENGLISH
{+Every attribute that is assigned to an expectation rule in a risk matrix, must be of a type that is specified for expectation rules for this type of risk matrices.-}

-----------------------------------------------------------------------
CONCEPT AttrValue "the value of a rule attribute."
EXPLAIN CONCEPT AttrValue IN ENGLISH
{+Attribute values can be any, as long as their data type complies with what is specified by the associated RuleAttrType.-}

raValue :: RuleAttr * AttrValue [UNI] PRAGMA "The value of " " is ".
valDataType :: AttrValue -> DataType PRAGMA "The data represented by " " is of type ".

RULE data_attr_typecheck MAINTAINS raValue; valDataType = raType; ratDataType
EXPLAIN RULE data_attr_typecheck IN ENGLISH
{+The data type of a value of a risk attribute must be the same as the data type assigned to the risk attribute type.-}

-----------------------------------------------------------------------
ENDPATTERN
{-===================================================================-}
ENDCONTEXT
<\ENDQUOTE>