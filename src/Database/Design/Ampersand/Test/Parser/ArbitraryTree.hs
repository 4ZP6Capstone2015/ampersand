{-# LANGUAGE TemplateHaskell, GeneralizedNewtypeDeriving, Rank2Types, NoMonomorphismRestriction, ScopedTypeVariables #-}

module Database.Design.Ampersand.Test.Parser.ArbitraryTree () where

import Test.QuickCheck
import Data.Char
import Control.Applicative

import Database.Design.Ampersand.Core.AbstractSyntaxTree
import Database.Design.Ampersand.Core.ParseTree
import Database.Design.Ampersand.Test.Parser.ArbitraryPandoc()

fixed :: a -> Gen a
fixed x = elements [x]

none :: Gen [a]
none = elements [[]]

ascii :: Gen Char
ascii = elements (['a'..'z']++['A'..'Z']++['0'..'9']++"_")

str :: Gen String
str = listOf ascii

str1 :: Gen String
str1 = listOf1 ascii

str2 :: Gen String
str2 = suchThat str1 (\s -> length s > 1)

identifier :: Gen String
identifier = suchThat str2 startUpper
    where startUpper = isUpper . head

instance Arbitrary PandocFormat where
    arbitrary = elements [HTML,ReST,LaTeX,Markdown]
   
instance Arbitrary Lang where
    arbitrary = elements [English,Dutch]

instance Arbitrary Origin where
    arbitrary = oneof [
        fixed OriginUnknown,
        Origin <$> arbitrary,
        -- FileLoc <$> (String, Pos, String),
        DBLoc <$> arbitrary]

instance Arbitrary Expression where
    arbitrary = EDcI <$> PlainConcept <$> identifier

instance Arbitrary Declaration where
    arbitrary = oneof
          [Sgn <$> str1          -- String ^ the name of the declaration
               <*> arbitrary     -- Sign ^ the source and target concepts of the declaration
               <*> arbitrary     -- [Prop] ^ the user defined multiplicity properties (Uni, Tot, Sur, Inj) and algebraic properties (Sym, Asy, Trn, Rfx)
               <*> arbitrary     -- Maybe [Prop] ^ the calculated and user defined multiplicity properties (Uni, Tot, Sur, Inj) and algebraic properties (Sym, Asy, Trn, Rfx, Irf). Note that calculated properties are made by adl2fspec, so in the A-structure decprps and decprps_calc yield exactly the same answer.
               <*> arbitrary     -- String ^ three strings, which form the pragma. E.g. if pragma consists of the three strings: "Person ", " is married to person ", and " in Vegas."
               <*> arbitrary     -- String ^    then a tuple ("Peter","Jane") in the list of links means that Person Peter is married to person Jane in Vegas.
               <*> arbitrary     -- String
               <*> arbitrary     -- AMeaning ^ the meaning of a declaration, for each language supported by Ampersand.
               <*> arbitrary     -- Origin ^ the position in the Ampersand source file where this declaration is declared. Not all decalartions come from the ampersand souce file.
               <*> arbitrary     -- Bool   ^ if true, this is a signal relation; otherwise it is an ordinary relation.
               <*> arbitrary     -- Bool   ^ if true, this relation is declared by an author in the Ampersand script; otherwise it was generated by Ampersand.
               <*> arbitrary     -- String ^ the pattern where this declaration has been declared.
               <*> arbitrary     -- Bool   ^ if true, this relation may not be stored in or retrieved from the standard database (it should be gotten from a Plug of some sort instead)
          , Isn <$> arbitrary   -- A_Concept ^ The type
          , Vs  <$> arbitrary]  -- Sign

instance Arbitrary Sign where
    arbitrary = Sign <$> arbitrary <*> arbitrary

instance Arbitrary RuleOrigin where
    arbitrary = elements [UserDefined, Multiplicity, Identity]

instance Arbitrary a => Arbitrary (PairView a) where
    arbitrary = PairView <$> arbitrary

instance Arbitrary a => Arbitrary (PairViewSegment a) where
    arbitrary = oneof [PairViewText <$> identifier, PairViewExp <$> arbitrary <*> arbitrary]

instance Arbitrary SrcOrTgt where
    arbitrary = elements [Src, Tgt]

instance Arbitrary Database.Design.Ampersand.Core.ParseTree.Prop where
    arbitrary = elements [Uni,Inj,Sur,Tot,Sym,Asy,Trn,Rfx,Irf,Aut]

instance Arbitrary Rule where
    arbitrary = Ru
        <$> str1              -- String                      ^ Name of this rule
        <*> arbitrary         -- Expression                  ^ The rule expression
        <*> arbitrary         -- Origin                      ^ Position in the Ampersand file
        <*> arbitrary         -- AMeaning                    ^ Ampersand generated meaning (for all known languages)
        <*> none              -- [A_Markup]                  ^ User-specified violation messages, possibly more than one, for multiple languages.
        <*> arbitrary         -- Maybe (PairView Expression) ^ Custom presentation for violations, currently only in a single language
        <*> arbitrary         -- Sign                        ^ Allocated type
        <*> arbitrary         -- Maybe (Prop,Declaration)    ^ The property, if this rule originates from a property on a Declaration
        <*> arbitrary         -- String                      ^ Name of pattern in which it was defined.
        <*> arbitrary         -- RuleOrigin                  ^ Where does this rule come from?
        <*> arbitrary         -- Bool                        ^ True if this is a signal; False if it is an invariant

instance Arbitrary Pattern where
    arbitrary = A_Pat
        <$> str1           -- ^ Name of this pattern
        <*> arbitrary      -- ^ the position in the file in which this pattern was declared.
        <*> arbitrary      -- ^ the end position in the file, elements with a position between pos and end are elements of this pattern.
        <*> arbitrary      -- ^ The user defined rules in this pattern
        <*> none       --   , ptgns :: [A_Gen]       -- ^ The generalizations defined in this pattern
        <*> none       --   , ptdcs :: [Declaration] -- ^ The relations that are declared in this pattern
        <*> none       --   , ptups :: [Population]  -- ^ The user defined populations in this pattern
        <*> none       --   , ptids :: [IdentityDef] -- ^ The identity definitions defined in this pattern
        <*> none       --   , ptvds :: [ViewDef]     -- ^ The view definitions defined in this pattern
        <*> none       --   , ptxps :: [Purpose]     -- ^ The purposes of elements defined in this pattern

instance Arbitrary A_Concept where
    arbitrary = oneof [PlainConcept <$> str, fixed ONE]

instance Arbitrary A_Context where
    arbitrary = ACtx
         <$> identifier    -- ^ The name of this context
         <*> arbitrary     -- ^ The origin of the context. A context can be a merge of a file including other files c.q. a list of Origin.
         <*> arbitrary     -- ^ The default language used in this context.
         <*> arbitrary     -- ^ The default markup format for free text in this context (currently: LaTeX, ...)
         <*> arbitrary     -- ^ Names of patterns/processes to be printed in the functional specification. (For partial documents.)
         <*> arbitrary     -- ^ The patterns defined in this context
         <*> none          -- [Process]        -- ^ The processes defined in this context
         <*> arbitrary  -- ^ All user defined rules in this context, but outside patterns and outside processes
         <*> none          -- [Declaration]    -- ^ The relations that are declared in this context, outside the scope of patterns
         <*> none          -- [Population]     -- ^ The user defined populations of relations defined in this context, including those from patterns and processes
         <*> none          -- [ConceptDef]     -- ^ The concept definitions defined in this context, including those from patterns and processes
         <*> none          -- [IdentityDef]    -- ^ The identity definitions defined in this context, outside the scope of patterns
         <*> none          -- [ViewDef]        -- ^ The view definitions defined in this context, outside the scope of patterns
         <*> none          -- [A_Gen]          -- ^ The specialization statements defined in this context, outside the scope of patterns
         <*> none          -- [[A_Concept]]    -- ^ A partitioning of all concepts: the union of all these concepts contains all atoms, and the concept-lists are mutually distinct in terms of atoms in one of the mentioned concepts
         <*> none          -- [Interface]      -- ^ The interfaces defined in this context
         <*> none          -- [Purpose]        -- ^ The purposes of objects defined in this context, outside the scope of patterns and processes
         <*> none          -- [ObjectDef]      -- ^ user defined sqlplugs, taken from the Ampersand script
         <*> none          -- [ObjectDef]      -- ^ user defined phpplugs, taken from the Ampersand script
         <*> none          -- [Meta]           -- ^ used for Pandoc authors (and possibly other things)

instance Arbitrary A_Markup where
    arbitrary = A_Markup
        <$> arbitrary -- Lang
        <*> arbitrary -- PandocFormat
        <*> arbitrary -- [Block]

instance Arbitrary AMeaning where
    arbitrary = AMeaning <$> arbitrary
