CONTEXT Atlas
PATTERN Atlas
--GEN Rule ISA Expression
--GEN Morphism ISA Expression
--type::Expression->Type.
type::Rule->Type.
--type::Morphism->Type.
-- a relation variable can be overloaded -> no function
-- TODO -> namespaces?
relvar::Relation*Type.

source::Type->Concept.
target::Type->Concept.

violates::Violation*Rule.
explanation::Rule->Explanation.
thepicture::MainPicture*MainPicture.

contains::Relation*Pair.
contains::Concept*Atom.

GEN UserRule ISA Rule
GEN MultiplicityRule ISA Rule
GEN HomogeneousRule ISA Rule
property::MultiplicityRule->Prop.
on::MultiplicityRule->Relation.
property::HomogeneousRule->Prop.
on::HomogeneousRule->Relation.

--IsaRelation contains only user-defined isa relations, not derived ones
specific::IsaRelation->Concept. 
general::IsaRelation->Concept. 

ENDPATTERN


SERVICE Rules : I[ONE]
   = [ "Conceptual diagram"{"PICTURE"}: V[ONE*MainPicture]
     , "User-defined rules" : V[ONE*UserRule]
         = [ rule : I[UserRule]
--           , source : type;source
  --         , target : type;target
    --       , violations : violates~
           ]
     , Multiplicities : V[ONE*MultiplicityRule]
         = [ property : property
           , on : on
           , rule : I[MultiplicityRule]
      --     , violations : violates~
           ]
     , "Homogeneous properties" : V[ONE*HomogeneousRule]
         = [ property : property
           , on : on
           , rule : I[HomogeneousRule]
        --   , violations : violates~
           ]
      ] 

--TODO -> specific types moeten doorlinken naar generiekere service, als geen specifieke service bestaat
--TODO -> relations op generieke types moeten herkend worden, zodat juiste SQL gemaakt kan worden
--        nu wordt default de specieke tabel gebruikt voor alle relaties!
SERVICE Rule : I[Rule]
   = [ source : type;source
     , target : type;target
     , violations : violates~
     , explanation : explanation]

SERVICE "ISArelations" : I[ONE]
   = [ "IS-a relations" : V[ONE*IsaRelation]
      = [ "IS-a relation" : I[IsaRelation]
        , specific : specific
        , isa : general
        ]
     ]

SERVICE Relations : I[ONE]
   = [ Relation_s : V[ONE*Relation]]

SERVICE Relation   : I[Relation]
   = [ type        : relvar
     , "source(s)" : relvar;source
     , "target(s)" : relvar;target
     , "multiplicity properties"  : (on[MultiplicityRule*Relation])~;property
     , "homogeneous properties"  : (on[HomogeneousRule*Relation])~;property
     , population  : contains]

SERVICE Concepts : I[ONE]
   = [ Concept_s : V[ONE*Concept]]

SERVICE Concept : I[Concept]
   = [ population : contains]

ENDCONTEXT
