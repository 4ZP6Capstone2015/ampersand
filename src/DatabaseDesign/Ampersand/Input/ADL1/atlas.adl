CONTEXT Atlas

--GEN/SPEC is not considered yet, while it does not work properly in PHP at this moment.
--TODO -> WHILE GEN does not work well in prototype it is best to first define relations on 
--specific concept -> general properties are translated into columns at the end, so they can be removed more easily

PATTERN Atlas
picture::Service->Picture.

-- a relation variable can be overloaded -> no function
-- TODO -> namespaces?
relvar::Relation*Type.
contains::Relation*Pair.
contains::Concept*Atom.
description::Relation*Explanation [UNI].
example::Relation->PragmaExample.

source::Type->Concept.
target::Type->Concept.
description::Concept*Explanation [UNI].

--IsaRelation contains only user-defined isa relations, not derived ones
specific::IsaRelation->Concept. 
general::IsaRelation->Concept.
picture::Concept->Picture.
ENDPATTERN
PATTERN Rules

{--SPECIFIC RULE DECLARATIONS--}
--GEN UserRule ISA Rule
--GEN MultiplicityRule ISA Rule
--GEN HomogeneousRule ISA Rule
morphisms::UserRule*Relation.
morphisms::Signal*Relation.
property::MultiplicityRule->Prop.
on::MultiplicityRule->Relation.
property::HomogeneousRule->Prop.
on::HomogeneousRule->Relation.
contains::Signal*Pair.

{--GENERAL RULE DECLARATIONS--}
--GEN Rule ISA Expression
--GEN Morphism ISA Expression
--type::Expression->Type.
type::Rule->Type.
type::UserRule->Type.
type::MultiplicityRule->Type.
type::HomogeneousRule->Type.
type::Signal->Type.
--type::Morphism->Type.
violates::Violation*Rule.
violates::Violation*UserRule.
violates::Violation*MultiplicityRule.
violates::Violation*HomogeneousRule.
explanation::Rule->Explanation.
explanation::UserRule->Explanation.
explanation::MultiplicityRule->Explanation.
explanation::HomogeneousRule->Explanation.
explanation::Signal->Explanation.
picture :: UserRule -> Picture.
ENDPATTERN

PATTERN Pattern
pattern :: Rule -> Pattern.
pattern :: UserRule -> Pattern.
pattern :: Signal -> Pattern.
pattern :: MultiplicityRule -> Pattern. --REMARK -> has not been set (use on;pattern)
pattern :: HomogeneousRule -> Pattern. --REMARK -> has not been set (use on;pattern)
pattern :: Relation -> Pattern.
pattern :: IsaRelation -> Pattern.
picture :: Pattern -> Picture.
ENDPATTERN

PATTERN ViolationAnalysis
--subexpressionOf::SubExpression->Expression.
--GEN Rule ISA Expression
--GEN SubExpression ISA Expression

--KEY subexpr: SubExpression(of:subexpressionOf) 
--TODO -> "KEY" makes of SubExpression an Int in prototype. Where is my subexpression?
--I could replace all SubExpression by SubExpressionId and add idOf::SubExpressionId->SubExpression
--but I do not want this ID, it's an implementation choice
--the implementation could have chosen to actually put a key on both column 'i' and 'subexpressionof' and extend all queries.
subexpressionOf::SubExpression -> UserRule.
contains::SubExpression*Pair.
ENDPATTERN

PATTERN Ordering
--GEN Rule ISA Ordening
next :: UserRule->UserRule.
previous :: UserRule->UserRule.
next :: Signal->Signal.
previous :: Signal->Signal.
ENDPATTERN

ENDCONTEXT






